#include <Adafruit_Fingerprint.h>

// Serial3		==> Tx (White) = 14		==> Rx (Green) = 15
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial3);

int p;

void setup()  
{ 
  while(!Serial);
  Serial.begin(115200);
  Serial.println("\n[ Upload + Store FlashMemory + Show Templete ]\n");

  // set the data rate for the sensor serial port
  // HIGH baudrate must use Hardware Serial (Serial3 / Serial2 / Serial1)
  finger.begin(115200);
  
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1);
  }
      
uint8_t packet2[] = {0x03, 0x03, 0x5A, 0x2A, 0x28, 0x01, 0x3F, 0x01, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x93, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x0C, 0x33, 0x33, 0xCC, 0xFF, 0xEF, 0xFF, 0xFB, 0xFF, 0xFE, 0xFF, 0xFE, 0xEA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xA6, 0x59, 0x55, 0x55, 0x55, 0x45, 0x55, 0x55, 0x44, 0x51, 0x14, 0x40, 0x44, 0x40, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01};
uint8_t packet3[] = {0x2C, 0x8C, 0xD4, 0xBE, 0x3A, 0x14, 0x15, 0x3E, 0x76, 0x9A, 0xDA, 0xFE, 0x42, 0x1B, 0x55, 0xBE, 0x5D, 0x27, 0xD8, 0xBE, 0x1A, 0x2A, 0x0F, 0x9E, 0x24, 0xAA, 0x4F, 0xDE, 0x45, 0x2D, 0x93, 0x1E, 0x3E, 0xB0, 0xAA, 0xBE, 0x2F, 0xB2, 0xCF, 0x5E, 0x4B, 0x8C, 0x16, 0x5F, 0x39, 0x0D, 0xEC, 0xDF, 0x5B, 0x90, 0x97, 0x5F, 0x4B, 0x13, 0x41, 0x1F, 0x77, 0x2A, 0x5B, 0x1F, 0x53, 0xAE, 0x57, 0x3F, 0x51, 0xBA, 0x52, 0x5F, 0x2A, 0xBF, 0x4C, 0x7F, 0x0A, 0x45, 0xCE, 0x3F, 0x36, 0x48, 0xA3, 0x5F, 0x72, 0x15, 0x59, 0xBC, 0x39, 0x3F, 0xCC, 0xDC, 0x5E, 0x33, 0xD8, 0xDD, 0x5E, 0x36, 0xD7, 0xFD, 0x17, 0x38, 0x4D, 0x5D, 0x1A, 0xBB, 0x64, 0x3D, 0x61, 0x3D, 0x17, 0xDD, 0x67, 0xBE, 0x9A, 0xBD, 0x40, 0x41, 0x4C, 0x9D, 0x69, 0x19, 0x58, 0xFB, 0x4E, 0x1F, 0x17, 0x3B, 0x48, 0x9E, 0x41, 0xF8};
uint8_t packet4[] = {0x6C, 0x16, 0xC3, 0xD9, 0x60, 0xC8, 0xC3, 0xF9, 0x5C, 0x4A, 0x86, 0x39, 0x4E, 0x43, 0x29, 0x97, 0x4C, 0x44, 0xCA, 0xF7, 0x54, 0x45, 0xC6, 0xF3, 0x57, 0x46, 0xC4, 0xD3, 0x38, 0x06, 0x56, 0xBE, 0x7F, 0x90, 0x9C, 0x3D, 0x7D, 0x94, 0x45, 0x9D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
uint8_t packet5[] = {0x03, 0x03, 0x5C, 0x2F, 0x00, 0x01, 0x20, 0x01, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC3, 0x3C, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x54, 0x45, 0x11, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
uint8_t packet6[] = {0x23, 0x84, 0x56, 0x1E, 0x54, 0x05, 0x99, 0x5E, 0x1B, 0x0A, 0x14, 0xBE, 0x66, 0x98, 0xDA, 0xDE, 0x4E, 0xA3, 0x57, 0xFE, 0x39, 0xAA, 0x12, 0x1E, 0x6F, 0x37, 0x47, 0x3E, 0x31, 0xBD, 0x8C, 0x1E, 0x3A, 0xBF, 0x4C, 0x1E, 0x11, 0xC2, 0xCD, 0x3E, 0x3A, 0x09, 0x96, 0xBF, 0x29, 0x0B, 0x6C, 0x9F, 0x4B, 0x0D, 0xD7, 0x3F, 0x3A, 0x10, 0x41, 0x1F, 0x2B, 0x12, 0x95, 0x1F, 0x6D, 0xA2, 0xC5, 0x1F, 0x68, 0x26, 0x9B, 0x5F, 0x49, 0x28, 0x16, 0x5F, 0x18, 0xAA, 0x4F, 0x9F, 0x33, 0x2E, 0xE9, 0xBF, 0x28, 0x31, 0x4F, 0x5F, 0x48, 0xB5, 0xD1, 0x1F, 0x70, 0x3C, 0x5D, 0x5F, 0x22, 0xBE, 0xCC, 0x5F, 0x6E, 0xC2, 0x5B, 0x9F, 0x32, 0x98, 0xD5, 0x1C, 0x08, 0x26, 0x28, 0x5C, 0x0C, 0xA8, 0xCF, 0x9C, 0x11, 0xB9, 0xE4, 0x9C, 0x6D, 0x0A, 0x5B, 0x9D, 0x6C, 0x0E, 0x04, 0xFD, 0x40, 0x1B, 0xD6, 0xBD};
uint8_t packet7[] = {0x53, 0xAE, 0xD7, 0xFD, 0x54, 0xB1, 0xD7, 0x1D, 0x0C, 0x37, 0x4D, 0x7D, 0x58, 0x38, 0x17, 0x7D, 0x5D, 0xB9, 0x9A, 0xDD, 0x62, 0x13, 0x59, 0xFA, 0x39, 0x1B, 0x01, 0x5A, 0x5D, 0x15, 0x84, 0x38, 0x59, 0x16, 0x58, 0xD9, 0x45, 0xC1, 0xCA, 0x17, 0x47, 0xBE, 0xA7, 0xF5, 0x50, 0xC2, 0x04, 0xD3, 0x4B, 0x3D, 0x8E, 0x91, 0x4B, 0xBF, 0x47, 0x0F, 0x4D, 0x3F, 0x84, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	
	Serial.print("\n===> Write Packet");
   p = finger.uploadModel(packet2, packet3, packet4, packet5, packet6, packet7);		// Simpan di Char Buffer 01      
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println(" SUKSES");
      Serial.read();
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_BADPACKET:
      Serial.println("Bad packet");
      return p;      
    default:
	{
	Serial.println("\n==>[SUKSES] UploadModel = ");
      //return p;
	}
  }
  int id = 12;		// --> id = FlashMemory Place
  Serial.print("\n==>[SUKSES] StoreModel + ID = ");Serial.print(id);
  p = finger.storeModel(id);									// taruh di ID = 0 pada flash memory FP
  if (p == FINGERPRINT_OK) {
    Serial.println(" Stored!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }
}

void loop()
{}


